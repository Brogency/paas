---
- name: Checkout fresh source code of {{ name }} app to {{ branch }}
  git:
    repo: "{{ repository }}"
    dest: "/home/build/projects/{{ name }}"
    version: "{{ branch }}"
    key_file: /home/build/ssh/id_rsa_deploy
    accept_hostkey: yes
    force: yes
  notify: Rebuild container
  tags:
  - deploy
  - rebuild
  when: use_build

- meta: flush_handlers

- name: Create {{ name }} postgres user
  postgresql_user:
    login_host: 127.0.0.1
    login_unix_socket: no
    login_password: "{{ postgres_superuser_password }}"
    name: "{{ name }}"
    password: "{{ postgres_app_password }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
  when: use_postgres

- name: Create {{ name }} database
  postgresql_db:
    login_host: 127.0.0.1
    login_unix_socket: no
    login_password: "{{ postgres_superuser_password }}"
    name: "{{name}}"
    owner: "{{name}}"
    encoding: UTF-8
  when: use_postgres

- name: Run {{ name }} redis
  docker:
    name: "{{ name }}-redis"
    state: reloaded
    image: "{{ redis_image }}"
    restart_policy: always
  when: use_redis

- name: Create volumes for {{ name }}
  docker:
    name: "{{ name }}-data"
    image: busybox
    state: present
    volumes: "{{ volumes }}"

- name: Run {{name}} web worker
  docker:
    name: "{{name}}-web-worker"
    image: "{{web_worker_image}}"
    registry: "{{ registry }}"
    state: "{{ web_worker_state }}"
    restart_policy: always
    command: "{{ web_worker_command }}"
    count: "{{ web_worker_count }}"
    links: "{{ default_links + links }}"
    env: "{{ default_env|merge(env)|merge(web_worker_env) }}"
    ports: "{{ [] + web_worker_ports }}"
    volumes_from: "{{ name }}-data"
    volumes:
    - "/home/data/{{name}}/media:/{{media_path_at_container}}"
  tags:
  - webworker
  - deploy
  when: use_web_worker

- name: Run {{ name }} delay job worker
  docker:
    name: "{{ name }}-delay-job-worker"
    image: "{{ delay_job_worker_image }}"
    registry: "{{ registry }}"
    state: reloaded
    restart_policy: always
    command: "{{ delay_job_command }}"
    count: "{{ delay_job_worker_count }}"
    links: "{{ default_links + links }}"
    env: "{{ default_env|merge(env)|merge(delay_job_worker_env) }}"
    volumes_from: "{{ name }}-data"
    volumes:
    - "/home/data/{{name}}/media:/{{media_path_at_container}}"
  tags:
  - delayjobworker
  - deploy
  when: use_delay_job_worker

- name: Setup {{ name }} web_worker
  etcd:
    state: "present"
    host: "{{ ansible_docker0['ipv4']['address'] }}"
    port: 4001
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
  - {key: "/hosts/{{ web_worker_service }}/enable", value: True}
  - {key: "/hosts/{{ web_worker_service }}/server_name", value: "{{server_name}}"}
  when: use_web_worker
  tags:
  - etcd

- name: Setup {{ name }} media serving
  etcd:
    state: "present"
    host: "{{ ansible_docker0['ipv4']['address'] }}"
    port: 4001
    key: "/hosts/{{ web_worker_service }}/media"
    value: "/home/data/{{name}}"
  when: use_media
  tags:
  - etcd

- name: Setup nginx caching
  etcd:
    state: "present"
    host: "{{ ansible_docker0['ipv4']['address'] }}"
    port: 4001
    key: "/hosts/{{ web_worker_service }}/caches/{{ item.name }}/path"
    value: item.path
  with_items: "{{ caches }}"
  tags:
  - etcd

- name: Setup database backuping for {{name}}
  cron:
    name: "Create backup for {{name}}"
    minute: "{{ 59 |random}}"
    hour: "{{ [5,6,7]|random }}"
    job: "/usr/local/bin/backup.sh {{name}}"
  tags:
  - backup
